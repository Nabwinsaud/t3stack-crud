import { signIn, signOut, useSession } from "next-auth/react";
import Head from "next/head";
import { useState } from "react";
import { api } from "~/utils/api";
import { Button, Divider, useDisclosure } from "@chakra-ui/react";
import CreateTodo from "~/components/CreateTodo";
import ShowTodos, { TodoProps } from "~/components/ShowTodos";
import DeleteTodo from "~/components/DeleteTodo";
export default function Home() {
  const [todo, setTodo] = useState<TodoProps | null>(null);
  const [deletedId, setDeletedId] = useState<string | null>(null);
  const hello = api.example.hello.useQuery({ text: "T3 Stack" });

  const { data, isLoading } = api.todo.get.useQuery();

  const { isOpen, onOpen, onClose } = useDisclosure();
  const {
    isOpen: isOpenDelete,
    onOpen: onOpenDelete,
    onClose: onCloseDelete,
  } = useDisclosure();

  if (isLoading) return <p>Loading todos ...</p>;

  return (
    <>
      {/* a combination of tailwind + chakra ui  */}
      <Head>
        <title>Create Full Stack App </title>
        <meta name="description" content="Generated by create-next-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className="container my-4 flex flex-col px-6">
        <div className="flex flex-col  gap-2">
          <p className="text-2xl  ">
            {hello.data ? hello.data.greeting : "Loading  ..."}
          </p>
        </div>

        <Divider className="my-2 w-screen py-2 text-slate-600" />

        <div className="container  flex justify-between">
          <h1>Todo</h1>

          <Button
            variant={"solid"}
            colorScheme="teal"
            size="sm"
            className="rounded-sm px-4 py-2"
            onClick={onOpen}
          >
            Create Todo
          </Button>
        </div>

        <CreateTodo
          isOpen={isOpen}
          onClose={onClose}
          todo={todo}
          setTodo={setTodo}
        />

        <ShowTodos
          todos={data}
          setTodo={setTodo}
          onOpen={onOpen}
          setDeletedId={setDeletedId}
          onOpenDelete={onOpenDelete}
        />

        <DeleteTodo
          isOpen={isOpenDelete}
          onClose={onCloseDelete}
          deletedId={deletedId}
          setDeletedId={setDeletedId}
        />
      </main>
    </>
  );
}
